#!/usr/bin/env python3
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('GdkX11', '3.0')
from gi.repository import Gtk, Gdk, GdkX11, GObject, GLib
import math
import cairo
import os
import configparser
import subprocess
import webbrowser

# –°–ø–∏—Å–æ–∫ –º–∞—Å—à—Ç–∞–±–æ–≤ –∫–∞—Ä—Ç
MAP_SCALES = [150, 170, 180, 190, 200, 225, 250, 275, 300, 325, 350, 400, 450, 500, 550]

class MapRuler(Gtk.Window):
    def __init__(self):
        super().__init__(title="–î–∞–ª—å–Ω–æ–º–µ—Ä –¥–ª—è War Thunder")
        self.set_default_size(500, 480)
        self.set_app_paintable(True)
        self.set_skip_taskbar_hint(True)
        self.set_keep_above(True)
        self.set_decorated(False)
        self.set_visual(self.get_screen().get_rgba_visual())
        self.set_position(Gtk.WindowPosition.CENTER)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.selected_scale = 225  # –ú–∞—Å—à—Ç–∞–± –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.scale_factor = 1.0  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.start_point = None
        self.end_point = None
        self.temp_point = None
        self.last_focus = None
        self.horizontal_only = False
        self.calibration_mode = False
        self.dragging = False
        self.drag_corner = None
        self.drag_start = None

        # –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.calibrated_scale = None
        self.use_calibrated_scale = False
        self.calibration_base_scale = None  # –ú–∞—Å—à—Ç–∞–±, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ
        self.grid_size = 200  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
        self.grid_pos = (100, 100)  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–µ—Ç–∫–∏

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.config_file = os.path.expanduser("~/.wt_map_ruler_calibration.ini")
        self.load_config()

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if self.use_calibrated_scale and self.calibrated_scale:
            self.scale_factor = self.calibrated_scale

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
        self.add(self.box)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.connect("draw", self.on_draw)
        self.connect("button-press-event", self.on_button_press)
        self.connect("button-release-event", self.on_button_release)
        self.connect("motion-notify-event", self.on_mouse_move)
        self.connect("key-press-event", self.on_key_press)
        self.connect("key-release-event", self.on_key_release)
        self.connect("destroy", self.on_destroy)
        self.connect("realize", self.on_realize)
        self.set_events(Gdk.EventMask.POINTER_MOTION_MASK |
                       Gdk.EventMask.BUTTON_PRESS_MASK |
                       Gdk.EventMask.BUTTON_RELEASE_MASK |
                       Gdk.EventMask.KEY_PRESS_MASK |
                       Gdk.EventMask.KEY_RELEASE_MASK)
        self.set_opacity(0.85)

    def on_realize(self, widget):
        screen = self.get_screen()
        monitor = screen.get_display().get_primary_monitor()
        geometry = monitor.get_geometry()
        width, height = self.get_size()
        x = geometry.x + geometry.width - width
        y = geometry.y + geometry.height - height
        self.move(x, y)
        self.set_keep_above(True)
        self.set_accept_focus(False)

    def load_config(self):
        config = configparser.ConfigParser()
        if os.path.exists(self.config_file):
            config.read(self.config_file)
            try:
                # –ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                self.calibrated_scale = float(config.get('CALIBRATION', 'calibrated_scale', fallback="0"))
                if self.calibrated_scale <= 0:
                    self.calibrated_scale = None
                self.use_calibrated_scale = config.getboolean('CALIBRATION', 'use_calibrated_scale', fallback=False)
                self.calibration_base_scale = config.getint('CALIBRATION', 'calibration_base_scale', fallback=None)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
                self.grid_size = config.getfloat('GRID', 'grid_size', fallback=200)
                self.grid_pos = (
                    config.getfloat('GRID', 'grid_x', fallback=100),
                    config.getfloat('GRID', 'grid_y', fallback=100)
                )
            except (ValueError, configparser.NoOptionError):
                self.calibrated_scale = None
                self.use_calibrated_scale = False
                self.calibration_base_scale = None

    def save_config(self):
        config = configparser.ConfigParser()
        config['CALIBRATION'] = {
            'calibrated_scale': str(self.calibrated_scale) if self.calibrated_scale is not None else "0",
            'use_calibrated_scale': str(self.use_calibrated_scale),
            'calibration_base_scale': str(self.calibration_base_scale) if self.calibration_base_scale is not None else "0"
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
        config['GRID'] = {
            'grid_size': str(self.grid_size),
            'grid_x': str(self.grid_pos[0]),
            'grid_y': str(self.grid_pos[1])
        }

        with open(self.config_file, 'w') as configfile:
            config.write(configfile)

    def recalculate_scale(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if hasattr(self, 'scale_value'):
            if self.use_calibrated_scale and self.calibrated_scale is not None:
                base_text = f" (–±–∞–∑–∞: {self.calibration_base_scale} –º)" if self.calibration_base_scale else ""
                self.scale_value.set_text(f"{self.scale_factor:.6f} –º/–ø–∏–∫—Å{base_text}")
            else:
                self.scale_value.set_text(f"{self.scale_factor:.6f} –º/–ø–∏–∫—Å")

        if hasattr(self, 'distance_value') and self.start_point and self.end_point:
            self.update_distance_display()

    def on_destroy(self, widget):
        self.save_config()
        Gtk.main_quit()

    def show_help(self, widget):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"""
        dialog = Gtk.Dialog(title="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", parent=self)
        dialog.set_default_size(450, 400)
        dialog.set_border_width(10)

        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_area = dialog.get_content_area()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä
        text_buffer = Gtk.TextBuffer()
        text_buffer.set_text(
            "üìè –î–∞–ª—å–Ω–æ–º–µ—Ä –¥–ª—è War Thunder - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n"
            "‚öôÔ∏è –û—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "1. –ü—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É (—Ç–æ—á–∫–∞ –ê)\n"
            "2. –õ–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ/–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É (—Ç–æ—á–∫–∞ –ë)\n"
            "3. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ\n\n"

            "üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π):\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å'\n"
            "2. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–µ—Ç–∫—É 7x7 –∏ —Å–æ–≤–º–µ—Å—Ç–∏—Ç–µ –µ—ë —Å –∫–∞—Ä—Ç–æ–π –≤ –∏–≥—Ä–µ\n"
            "   - –ó–∞–∂–º–∏—Ç–µ –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –Ω–∞ —É–≥–ª—É —Å–µ—Ç–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞\n"
            "   - –ó–∞–∂–º–∏—Ç–µ –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞\n"
            "4. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É'\n"
            "5. –¢–µ–ø–µ—Ä—å –≤—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –±—É–¥—É—Ç —Ç–æ—á–Ω—ã–º–∏!\n\n"

            "‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n"
            "‚Ä¢ R - –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ—á–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
            "‚Ä¢ T - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º '–ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω'\n"
            "‚Ä¢ C - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞/–∏–∑–º–µ—Ä–µ–Ω–∏–µ\n"
            "‚Ä¢ Y - –û—Ç–∫—Ä—ã—Ç—å YouTube –∫–∞–Ω–∞–ª EXTRUD\n"
            "‚Ä¢ ESC - –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"

            "üí° –°–æ–≤–µ—Ç—ã:\n"
            "‚Ä¢ –ö–∞–ª–∏–±—Ä–æ–≤–∫—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞\n"
            "‚Ä¢ –ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            "‚Ä¢ –î–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–ª–∏–±—Ä—É–π—Ç–µ—Å—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ –∫–∞—Ä—Ç—ã"
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        text_view = Gtk.TextView(buffer=text_buffer)
        text_view.set_editable(False)
        text_view.set_cursor_visible(False)
        text_view.set_wrap_mode(Gtk.WrapMode.WORD)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_min_content_height(300)
        scrolled_window.add(text_view)

        content_area.pack_start(scrolled_window, True, True, 0)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        dialog.add_button("–ó–∞–∫—Ä—ã—Ç—å", Gtk.ResponseType.CLOSE)

        dialog.show_all()
        dialog.run()
        dialog.destroy()

    def create_control_panel(self):
        self.control_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        self.control_box.set_margin_start(5)
        self.control_box.set_margin_end(5)
        self.control_box.set_margin_top(5)
        self.box.pack_start(self.control_box, False, False, 0)

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏/–∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.mode_btn = Gtk.Button(label="–ö–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å" if not self.calibration_mode else "–õ–∏–Ω–µ–π–∫–∞")
        self.mode_btn.set_tooltip_text("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏/–∏–∑–º–µ—Ä–µ–Ω–∏—è")
        self.mode_btn.connect("clicked", self.toggle_mode)
        self.control_box.pack_start(self.mode_btn, False, False, 0)

        self.scale_label = Gtk.Label(label="–ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã:")
        self.control_box.pack_start(self.scale_label, False, False, 0)

        self.scale_combo = Gtk.ComboBoxText()
        for scale in MAP_SCALES:
            self.scale_combo.append_text(str(scale))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (225)
        self.scale_combo.set_active(MAP_SCALES.index(225))
        self.scale_combo.connect("changed", self.on_scale_changed)
        self.control_box.pack_start(self.scale_combo, False, False, 0)

        self.scale_label = Gtk.Label(label="–¢–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±:")
        self.control_box.pack_start(self.scale_label, False, False, 0)

        scale_text = f"{self.scale_factor:.6f} –º/–ø–∏–∫—Å"
        if self.use_calibrated_scale and self.calibrated_scale is not None:
            scale_text += " (–∫–∞–ª–∏–±—Ä)"
        self.scale_value = Gtk.Label(label=scale_text)
        self.scale_value.get_style_context().add_class("scale-value")
        self.control_box.pack_start(self.scale_value, False, False, 0)

        self.distance_label = Gtk.Label(label="–î–∏—Å—Ç–∞–Ω—Ü–∏—è:")
        self.control_box.pack_start(self.distance_label, False, False, 0)

        self.distance_value = Gtk.Label(label="0.00 –º")
        self.distance_value.get_style_context().add_class("distance-value")
        self.control_box.pack_start(self.distance_value, False, False, 0)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏)
        self.apply_btn = Gtk.Button(label="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É")
        self.apply_btn.set_visible(False)
        self.apply_btn.connect("clicked", self.apply_calibration)
        self.control_box.pack_start(self.apply_btn, False, False, 0)

        self.reset_btn = Gtk.Button(label="‚Ü∫")
        self.reset_btn.get_style_context().add_class("reset-btn")
        self.reset_btn.connect("clicked", self.reset_points)
        self.reset_btn.set_tooltip_text("–°–±—Ä–æ—Å–∏—Ç—å —Ç–æ—á–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è (R)")
        self.control_box.pack_end(self.reset_btn, False, False, 0)

        self.youtube_btn = Gtk.Button(label="Y")
        self.youtube_btn.get_style_context().add_class("youtube-btn")
        self.youtube_btn.connect("clicked", lambda w: webbrowser.open("https://www.youtube.com/@EXTRUD/shorts"))
        self.youtube_btn.set_tooltip_text("YouTube –∫–∞–Ω–∞–ª EXTRUD")
        self.control_box.pack_end(self.youtube_btn, False, False, 0)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ (–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫)
        self.help_btn = Gtk.Button(label="?")
        self.help_btn.get_style_context().add_class("help-btn")
        self.help_btn.connect("clicked", self.show_help)
        self.help_btn.set_tooltip_text("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
        self.control_box.pack_end(self.help_btn, False, False, 0)

        self.top_btn = Gtk.ToggleButton(label="üîù")
        self.top_btn.set_active(True)
        self.top_btn.connect("toggled", self.on_top_toggled)
        self.top_btn.set_tooltip_text("–í—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω")
        self.control_box.pack_end(self.top_btn, False, False, 0)

        css_provider = Gtk.CssProvider()
        css = b"""
        * {
            font-family: 'Sans';
            font-size: 10pt;
        }
        .close-btn {
            font-weight: bold;
            font-size: 14px;
            min-width: 20px;
            min-height: 20px;
            border-radius: 10px;
            background-color: #FF6B6B;
            color: white;
            border: none;
        }
        .reset-btn {
            font-weight: bold;
            font-size: 14px;
            min-width: 20px;
            min-height: 20px;
            border-radius: 10px;
            background-color: #3498DB;
            color: white;
            border: none;
        }
        .youtube-btn {
            font-weight: bold;
            font-size: 14px;
            min-width: 20px;
            min-height: 20px;
            border-radius: 10px;
            background-color: #FF0000;
            color: white;
            border: none;
        }
        .help-btn {
            font-weight: bold;
            font-size: 14px;
            min-width: 20px;
            min-height: 20px;
            border-radius: 10px;
            background-color: #9B59B6;
            color: white;
            border: none;
        }
        .distance-value {
            font-weight: bold;
            color: #27AE60;
            min-width: 80px;
        }
        .scale-value {
            font-weight: bold;
            color: #3498DB;
            min-width: 150px;
        }
        .calibration-active {
            background-color: #FF9800;
            color: white;
        }
        """
        css_provider.load_from_data(css)
        style_context = self.control_box.get_style_context()
        style_context.add_provider(
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

    def toggle_mode(self, button):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞/–∏–∑–º–µ—Ä–µ–Ω–∏–µ"""
        self.calibration_mode = not self.calibration_mode
        self.mode_btn.set_label("–õ–∏–Ω–µ–π–∫–∞" if self.calibration_mode else "–ö–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å")
        self.apply_btn.set_visible(self.calibration_mode)

        if not self.calibration_mode:
            # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ—á–∫–∏
            self.reset_points()

        self.queue_draw()

    def apply_calibration(self, button):
        if self.grid_size > 0:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–±
            scale_value = self.selected_scale
            # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            square_size_px = self.grid_size / 7.0
            # –ú–∞—Å—à—Ç–∞–±: –º–µ—Ç—Ä—ã –Ω–∞ –ø–∏–∫—Å–µ–ª—å
            self.calibrated_scale = scale_value / square_size_px
            self.calibration_base_scale = self.selected_scale
            self.use_calibrated_scale = True
            self.scale_factor = self.calibrated_scale

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.save_config()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.recalculate_scale()
            self.queue_draw()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            dialog = Gtk.MessageDialog(
                parent=self,
                flags=0,
                message_type=Gtk.MessageType.INFO,
                buttons=Gtk.ButtonsType.OK,
                text="–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!"
            )
            dialog.format_secondary_text(
                f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–±: {self.calibrated_scale:.6f} –º/–ø–∏–∫—Å\n"
                f"–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏: {self.grid_size:.1f} –ø–∏–∫—Å\n"
                f"–†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞: {square_size_px:.1f} –ø–∏–∫—Å\n"
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö."
            )
            dialog.run()
            dialog.destroy()

            # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            self.calibration_mode = False
            self.mode_btn.set_label("–ö–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å")
            self.apply_btn.set_visible(False)
        else:
            # –ï—Å–ª–∏ —Å–µ—Ç–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            dialog = Gtk.MessageDialog(
                parent=self,
                flags=0,
                message_type=Gtk.MessageType.ERROR,
                buttons=Gtk.ButtonsType.OK,
                text="–û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
            )
            dialog.format_secondary_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å–µ—Ç–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ.")
            dialog.run()
            dialog.destroy()

    def on_top_toggled(self, button):
        self.set_keep_above(button.get_active())
        if self.get_realized():
            self.on_realize(None)

    def on_scale_changed(self, combo):
        scale_str = combo.get_active_text()
        if scale_str:
            try:
                self.selected_scale = int(scale_str)

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –±–∞–∑–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±
                if self.use_calibrated_scale and self.calibration_base_scale:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞
                    scale_ratio = self.selected_scale / self.calibration_base_scale

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                    self.scale_factor = self.calibrated_scale * scale_ratio

                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    base_text = f" (–±–∞–∑–∞: {self.calibration_base_scale} –º)" if self.calibration_base_scale else ""
                    self.scale_value.set_text(f"{self.scale_factor:.6f} –º/–ø–∏–∫—Å{base_text}")

                self.recalculate_scale()
                self.queue_draw()
            except ValueError:
                pass

    def draw_corner_marker(self, cr, x, y, corner_type):
        """–†–∏—Å—É–µ—Ç —É–≥–æ–ª–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏"""
        marker_size = 15
        line_width = 2

        cr.set_line_width(line_width)
        cr.set_source_rgba(1, 1, 1, 0.8)  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –±–µ–ª—ã–µ –ª–∏–Ω–∏–∏

        if corner_type == 'tl':  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
            cr.move_to(x, y)
            cr.line_to(x + marker_size, y)
            cr.move_to(x, y)
            cr.line_to(x, y + marker_size)
        elif corner_type == 'tr':  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
            cr.move_to(x, y)
            cr.line_to(x - marker_size, y)
            cr.move_to(x, y)
            cr.line_to(x, y + marker_size)
        elif corner_type == 'bl':  # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
            cr.move_to(x, y)
            cr.line_to(x + marker_size, y)
            cr.move_to(x, y)
            cr.line_to(x, y - marker_size)
        elif corner_type == 'br':  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
            cr.move_to(x, y)
            cr.line_to(x - marker_size, y)
            cr.move_to(x, y)
            cr.line_to(x, y - marker_size)

        cr.stroke()

    def draw_calibration_grid(self, cr, x, y, size):
        """–†–∏—Å—É–µ—Ç —Å–µ—Ç–∫—É 7x7 –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        # –†–∏—Å—É–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç
        cr.set_source_rgba(1, 1, 1, 0.8)
        cr.set_line_width(2)
        cr.rectangle(x, y, size, size)
        cr.stroke()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä –¥–ª—è –ª–∏–Ω–∏–π —Å–µ—Ç–∫–∏
        cr.set_dash([3, 3], 0)
        cr.set_line_width(1)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–≥–∏ –¥–ª—è —Å–µ—Ç–∫–∏
        step = size / 7.0

        # –†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in range(1, 7):
            cr.move_to(x + i*step, y)
            cr.line_to(x + i*step, y+size)

        # –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in range(1, 7):
            cr.move_to(x, y + i*step)
            cr.line_to(x+size, y + i*step)

        cr.stroke()
        cr.set_dash([], 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä

        # –†–∏—Å—É–µ–º —É–≥–æ–ª–∫–∏ (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ)
        corners = [
            (x, y, 'tl'),  # top-left
            (x+size, y, 'tr'),  # top-right
            (x, y+size, 'bl'),  # bottom-left
            (x+size, y+size, 'br')  # bottom-right
        ]

        for cx, cy, corner_type in corners:
            self.draw_corner_marker(cr, cx, cy, corner_type)

        # –í—ã–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ —Å–ª–µ–≤–∞
        cr.set_font_size(14)
        cr.set_source_rgba(1, 1, 1, 0.8)
        cr.move_to(x - 120, y + size/2 - 7)
        cr.show_text(f"–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏:")
        cr.move_to(x - 120, y + size/2 + 10)
        cr.show_text(f"{size:.1f} –ø–∏–∫—Å")

    def on_draw(self, widget, cr):
        width = widget.get_allocated_width()
        height = widget.get_allocated_height()

        # –†–∏—Å—É–µ–º —Ñ–æ–Ω
        cr.set_source_rgba(0.2, 0.2, 0.2, 0.6)
        cr.rectangle(0, 0, width, height)
        cr.fill()

        # –í —Ä–µ–∂–∏–º–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ä–∏—Å—É–µ–º —Å–µ—Ç–∫—É
        if self.calibration_mode:
            x, y = self.grid_pos
            self.draw_calibration_grid(cr, x, y, self.grid_size)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cr.set_font_size(16)
            cr.set_source_rgba(1, 1, 1, 0.8)
            cr.move_to(10, height - 30)
            cr.show_text("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–µ—Ç–∫—É –Ω–∞ –∏–≥—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É'")
        else:
            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –∏ —Ç–æ—á–∫–∏ –¥–ª—è –ª–∏–Ω–µ–π–∫–∏
            if self.start_point:
                # –õ–∏–Ω–∏—è –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é –º—ã—à–∏ –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ
                if self.end_point:
                    target_point = self.end_point
                elif self.temp_point:
                    target_point = self.temp_point
                else:
                    return

                # –õ–∏–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
                cr.set_source_rgba(1, 1, 1, 1)
                cr.set_line_width(2)
                cr.move_to(self.start_point.x, self.start_point.y)
                cr.line_to(target_point.x, target_point.y)

                # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Ä–∏—Å—É–µ–º –ø—É–Ω–∫—Ç–∏—Ä
                if not self.end_point:
                    cr.set_dash([5, 3], 0)
                    cr.stroke()
                    cr.set_dash([], 0)
                else:
                    cr.stroke()

                # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ª–∏–Ω–∏—é
                if self.start_point and target_point:
                    dx = target_point.x - self.start_point.x
                    dy = target_point.y - self.start_point.y
                    pixels = math.sqrt(dx**2 + dy**2)
                    meters = pixels * self.scale_factor

                    cr.set_font_size(24)
                    cr.set_source_rgba(1, 1, 1, 1)
                    text_x = (self.start_point.x + target_point.x) / 2
                    text_y = (self.start_point.y + target_point.y) / 2 - 40
                    cr.move_to(text_x, text_y)
                    cr.show_text(f"{meters:.1f} –º")

    def get_corner_at(self, x, y):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤ –∫–∞–∫–æ–º —É–≥–ª—É —Å–µ—Ç–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ—á–∫–∞"""
        grid_x, grid_y = self.grid_pos
        size = self.grid_size
        threshold = 15  # –†–∞–¥–∏—É—Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        corners = [
            ('tl', grid_x, grid_y),  # top-left
            ('tr', grid_x + size, grid_y),  # top-right
            ('bl', grid_x, grid_y + size),  # bottom-left
            ('br', grid_x + size, grid_y + size)  # bottom-right
        ]

        for corner, cx, cy in corners:
            if math.hypot(x - cx, y - cy) <= threshold:
                return corner
        return None

    def is_inside_grid(self, x, y):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–∫–∏"""
        grid_x, grid_y = self.grid_pos
        size = self.grid_size
        return (grid_x <= x <= grid_x + size and
                grid_y <= y <= grid_y + size)

    def on_button_press(self, widget, event):
        if event.button == 3:  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ - —Ç–æ—á–∫–∞ –ê
            if not self.calibration_mode:
                self.start_point = Gdk.EventButton()
                self.start_point.x = event.x
                self.start_point.y = event.y
                self.end_point = None
                self.queue_draw()
        elif event.button == 1:  # –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            if self.calibration_mode:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —É–≥–ª—É —Å–µ—Ç–∫–∏ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏–µ
                corner = self.get_corner_at(event.x, event.y)
                if corner:
                    self.dragging = True
                    self.drag_corner = corner
                    self.drag_start = (event.x, event.y, self.grid_pos[0], self.grid_pos[1], self.grid_size)
                elif self.is_inside_grid(event.x, event.y):
                    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ–π —Å–µ—Ç–∫–∏
                    self.dragging = True
                    self.drag_corner = 'move'
                    self.drag_start = (event.x, event.y, self.grid_pos[0], self.grid_pos[1])
            else:
                # –†–µ–∂–∏–º –ª–∏–Ω–µ–π–∫–∏ - —Ç–æ—á–∫–∞ –ë
                if self.start_point:
                    # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –ë —É–∂–µ –µ—Å—Ç—å - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–µ
                    if self.end_point:
                        self.end_point.x = event.x
                        self.end_point.y = event.y
                    else:
                        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                        self.end_point = Gdk.EventButton()
                        self.end_point.x = event.x
                        self.end_point.y = event.y

                    self.update_distance_display()
                    self.queue_draw()

    def on_button_release(self, widget, event):
        if event.button == 1 and self.dragging:
            self.dragging = False
            self.drag_corner = None
            self.drag_start = None

    def on_mouse_move(self, widget, event):
        if self.calibration_mode and self.dragging and self.drag_corner and self.drag_start:
            # –£–º–µ–Ω—å—à–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ 2 —Ä–∞–∑–∞
            dx = (event.x - self.drag_start[0]) * 0.5
            dy = (event.y - self.drag_start[1]) * 0.5

            if self.drag_corner == 'move':
                # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ–π —Å–µ—Ç–∫–∏
                orig_x, orig_y = self.drag_start[2], self.drag_start[3]
                self.grid_pos = (orig_x + dx, orig_y + dy)
            else:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏ —Å —Ñ–∏–∫—Å–∞—Ü–∏–µ–π –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —É–≥–ª–∞
                orig_x, orig_y, orig_size = self.drag_start[2], self.drag_start[3], self.drag_start[4]

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if self.drag_corner == 'tl':  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
                    new_size = orig_size - dx - dy
                    # –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                    self.grid_pos = (orig_x + dx, orig_y + dy)
                elif self.drag_corner == 'tr':  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
                    new_size = orig_size + dx - dy
                    # –§–∏–∫—Å–∏—Ä—É–µ–º –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                    self.grid_pos = (orig_x, orig_y + dy)
                elif self.drag_corner == 'bl':  # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
                    new_size = orig_size - dx + dy
                    # –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                    self.grid_pos = (orig_x + dx, orig_y)
                elif self.drag_corner == 'br':  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
                    new_size = orig_size + dx + dy
                    # –§–∏–∫—Å–∏—Ä—É–µ–º –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                    self.grid_pos = (orig_x, orig_y)

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                self.grid_size = max(50, new_size)

            self.queue_draw()
        elif self.calibration_mode:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä
            corner = self.get_corner_at(event.x, event.y)
            if corner:
                self.get_window().set_cursor(Gdk.Cursor.new_for_display(
                    self.get_display(), Gdk.CursorType.SIZING))
            elif self.is_inside_grid(event.x, event.y):
                self.get_window().set_cursor(Gdk.Cursor.new_for_display(
                    self.get_display(), Gdk.CursorType.FLEUR))
            else:
                self.get_window().set_cursor(None)
        elif not self.calibration_mode and self.start_point and not self.end_point:
            self.temp_point = Gdk.EventButton()
            self.temp_point.x = event.x
            self.temp_point.y = event.y
            self.queue_draw()

    def update_distance_display(self):
        if self.start_point and self.end_point:
            dx = self.end_point.x - self.start_point.x
            dy = self.end_point.y - self.start_point.y
            pixels = math.sqrt(dx**2 + dy**2)
            meters = pixels * self.scale_factor
            self.distance_value.set_text(f"{meters:.1f} –º")

    def on_key_press(self, widget, event):
        keyval = event.keyval
        if keyval == Gdk.KEY_Escape:
            self.destroy()
        elif keyval == Gdk.KEY_r:
            self.reset_points()
        elif keyval == Gdk.KEY_t:
            self.top_btn.set_active(not self.top_btn.get_active())
        elif keyval == Gdk.KEY_c:
            self.toggle_mode(None)
        elif keyval == Gdk.KEY_y:
            webbrowser.open("https://www.youtube.com/@EXTRUD/shorts")
        elif keyval == Gdk.KEY_F1 or keyval == Gdk.KEY_question:
            self.show_help(None)
        return False

    def on_key_release(self, widget, event):
        return False

    def reset_points(self):
        self.start_point = None
        self.end_point = None
        self.temp_point = None
        self.distance_value.set_text("0.00 –º")
        self.queue_draw()

win = MapRuler()
win.show_all()
Gtk.main()
